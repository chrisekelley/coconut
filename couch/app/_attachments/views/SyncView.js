// Generated by CoffeeScript 1.6.3
var SyncView, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SyncView = (function(_super) {
  __extends(SyncView, _super);

  function SyncView() {
    this.changeLanguage = __bind(this.changeLanguage, this);
    this.sendLogs = __bind(this.sendLogs, this);
    this.updateForms = __bind(this.updateForms, this);
    this.refreshLog = __bind(this.refreshLog, this);
    this.render = __bind(this.render, this);
    _ref = SyncView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  SyncView.prototype.initialize = function() {
    var user;
    this.sync = new Sync();
    user = new User({
      _id: "user.admin"
    });
    return user.fetch({
      success: function() {
        var langChoice;
        langChoice = user.get('langChoice');
        this.langChoice = langChoice;
        return console.log("langChoice from doc: " + langChoice);
      }
    });
  };

  SyncView.prototype.el = '#content';

  SyncView.prototype.langChoice = '';

  SyncView.prototype.events = {
    "click #refreshLog": "refreshLog",
    "click #updateForms": "updateForms",
    "click #sendLogs": "sendLogs",
    "change #langChoice": "changeLanguage"
  };

  SyncView.prototype.render = function() {
    this.$el.html("        <h2>" + polyglot.t("server") + ("</h2>        <p><span class='sync-target'>" + (this.sync.target()) + "</span></p>        <p>" + (polyglot.t("version")) + ": " + Coconut.version_code + "</p>        <a data-role='button' class='btn btn-primary btn-lg' href='#sync/send'>") + polyglot.t("sendData") + "</a>        <a data-role='button' class='btn btn-primary btn-lg' id='updateForms'>" + polyglot.t("updateForms") + "</a>        <a data-role='button' class='btn btn-primary btn-lg' id='sendLogs'>" + polyglot.t("sendLogs") + "</a>        <h2>" + polyglot.t("SetLanguage") + "</h2>        <p>            " + polyglot.t("LangChoice") + "&nbsp;<span id='langCurrently'>" + langChoice + "</span><br/>" + "<select id='langChoice'>                <option value=''>--Select --</option>                <option value='en'>en</option>                <option value='pt'>pt</option>            </select>        </p>        <h2>" + polyglot.t("replicationLog") + "</h2>        <p>" + polyglot.t("replicationLogDescription") + "        <br/><br/><a data-role='button' class='btn btn-primary btn-lg' id='refreshLog'>" + polyglot.t("refreshLog") + "</a>        </p>        <div id=\"replicationLog\"></div>");
    return $("a").button();
  };

  SyncView.prototype.refreshLog = function() {
    var now;
    now = moment(new Date()).format(Coconut.config.get("date_format")) + "<br/>";
    return $("#replicationLog").html(now + Coconut.replicationLog);
  };

  SyncView.prototype.updateForms = function() {
    return this.sync.replicateForms();
  };

  SyncView.prototype.sendLogs = function() {
    var _this = this;
    return logger.getLogs(null, 100, function(log) {
      console.log("Generated logs");
      return CoconutUtils.saveLog(null, "Logcat log", log);
    });
  };

  SyncView.prototype.changeLanguage = function() {
    var langChoice, user;
    langChoice = $('#langChoice').val();
    console.log("langChoice: " + langChoice);
    if (langChoice !== '') {
      user = new User({
        _id: "user.admin"
      });
      return user.fetch({
        success: function() {
          var docLangChoice;
          docLangChoice = user.get('langChoice');
          console.log("langChoice from doc: " + docLangChoice);
          user.set('langChoice', langChoice);
          return user.save(null, {
            success: function() {
              var deferred;
              console.log("langChoice saved: " + user.get('langChoice'));
              deferred = CoconutUtils.fetchTranslation(langChoice);
              return deferred.done(function() {
                console.log("Got translation for" + langChoice);
                Coconut.router.navigate("", false);
                return location.reload();
              });
            },
            error: function(json, msg) {
              return console.log("Error saving langChoice  " + msg);
            }
          });
        }
      });
    }
  };

  return SyncView;

})(Backbone.View);
