{
  "name": "grunt-couch",
  "description": "Compile CouchDB design documents from Couchapp like directory tree.",
  "version": "1.4.0",
  "homepage": "https://github.com/jo/grunt-couch",
  "author": {
    "name": "Johannes J. Schmidt",
    "email": "schmidt@netzmerk.com",
    "url": "http://die-tf.de"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jo/grunt-couch.git"
  },
  "bugs": {
    "url": "https://github.com/jo/grunt-couch/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jo/grunt-couch/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.3.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "dependencies": {
    "request": "~2.14.0",
    "async": "~0.2.9",
    "mime": "~1.2.9",
    "lodash": "~2.4.1",
    "couch-compile": "git+https://github.com/chrisekelley/couch-compile"
  },
  "keywords": [
    "gruntplugin",
    "couchdb",
    "couchapp"
  ],
  "gitHead": "01f88049ee4ba5dfaaf547b4d3cef1409c40ac8f",
  "readme": "# grunt-couch [![Build Status](https://secure.travis-ci.org/jo/grunt-couch.png?branch=master)](http://travis-ci.org/jo/grunt-couch)\n\nCompile CouchDB design documents from Couchapp like directory tree.\n\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before,\nbe sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide,\nas it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins.\nOnce you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-couch --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-couch');\n```\n\n## The \"couch-compile\" task\nProcess Couchapp directoriy trees, JSON files and JavaScript modules.\n\n### Overview\n\nIn your project's Gruntfile, add a section named `couch-compile` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  'couch-compile': {\n    app: {\n      files: {\n        'tmp/app.json': 'couch/*'\n      }\n    }\n  }\n})\n```\n\nThis will load the directory tree from `app` and creates an `app.json` JSON file.\n\nSee [Configuring tasks: Files](http://gruntjs.com/configuring-tasks#files) for more information\nabout possible source and target configurations.\n\n### Options\n\n#### options.merge\n\nYour can specify sources which will be merged into all docs.\nThis is useful to provide defaults like templates and libs which are used in all ddocs.\n\nEg:\n\n```js\ngrunt.initConfig({\n  'couch-compile': {\n    app: {\n      config: {\n        merge: 'couch/shared/*'\n      },\n      files: {\n        'tmp/app.json': 'couch/*'\n      }\n    }\n  }\n})\n```\n\nMerge sources are expanded via [grunt.file.expand](http://gruntjs.com/api/grunt.file#grunt.file.expand)\nand compiled in exactly the same way as the other couch-compile targets.\n\n#### options.ignoreFiles\n\nIf you have a .couchappignore file, it will populate options.ignoreFiles and pass them to \n[couch-compile](https://github.com/jo/couch-compile), which will ignore those files. \n\n### The Couch Directory Tree\n\nis quite self-explanatory. For example:\n\n```shell\napp\n├── _attachments\n│   ├── a\n│   │   └── nested\n│   │       └── file.txt\n│   └── index.html\n├── _id\n├── language\n├── lists\n│   └── docs.js\n├── rewrites.json\n├── shows\n│   ├── doc.js\n│   └── hello.js\n├── validate_doc_update.js\n└── views\n    ├── names\n    │   └── map.js\n    └── numbers\n        ├── map.js\n        └── reduce\n```\n\n`grunt-couch` uses the same filesystem mapping like [Couchapp python tool](http://couchapp.org/page/couchapp-python)\nand [Erika](https://github.com/benoitc/erica):\n\n[The Couchapp Filesystem Mapping](http://couchapp.org/page/filesystem-mapping).\n\nFor the property name the file extension will be stripped:\n\n```js\n{\n  \"validate_doc_update\": \"content of validate_doc_update.js\",\n}\n```\n\nFiles inside the `\\_attachments` directory are handled special:\nThey become attachment entries of the form\n\n```js\n{\n  \"a/nested/file.txt\": {\n    \"data\": \"SGVsbG8gV29ybGQhCg==\",\n    \"content_type\": \"text/plain\"\n  }\n}\n```\n\nThe `content\\_type` is quessed using [mime](https://github.com/broofa/node-mime).\n`data` is the base64 encoded value of the file.\n\nRead more about the so called [Inline Attachments](http://wiki.apache.org/couchdb/HTTP_Document_API#Inline_Attachments).\n\n### Output JSON\n\nThe output JSON follows the [Bulk Document API](http://wiki.apache.org/couchdb/HTTP_Bulk_Document_API):\n\n```js\n{\n  \"docs\": [\n    { \"_id\": \"adoc\" },\n    { \"_id\": \"anotherdoc\" }\n  ]\n}\n```\n\n## The \"couch-push\" task\n\nWith the `couch-push` task you deploy your documents to CouchDB.\n\nThe database is created if not already present.\n\n### Overview\n\nIn your project's Gruntfile, add a section named `couch-push` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  'couch-push': {\n    options: {\n      user: 'karin',\n      pass: 'secure'\n    },\n    localhost: {\n      files: {\n        'http://localhost:5984/myapp': 'tmp/app.json'\n      }\n    }\n  }\n})\n```\n\n### Options\n\nYou may also pass in all the options as command line arguments\nand avoid storing the auth credentials in your gruntfile.\n\n#### options.user\n\nYour username.\n\n#### options.pass\n\nYour password.\n\n\n## The \"couch\" task\n\nThis is an [Alias task](http://www.google.com/intl/de/landing/nose/help.html) for\n`couch-compile` and `couch-push`.\nIt first compiles and then pushs the documents.\n\n\n## The \"couch-configure\" task\n\nYou can write [CouchDB configuration](http://wiki.apache.org/couchdb/Complete_HTTP_API_Reference#configuration)\nfrom project files with `couch-configure`.\n\nThis comes in handy when you are using [Virtual Hosts](http://wiki.apache.org/couchdb/Virtual_Hosts)\nor when your app requires custom configuration options in order to work.\n\n### Overview\n\nIn your project's Gruntfile, add a section named `couch-configure` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  'couch-configure': {\n    options: {\n      user: 'karin',\n      pass: 'secure'\n    },\n    localhost: {\n      files: {\n        'http://localhost:5984': 'config'\n      }\n    }\n  }\n})\n```\n\nNow write your configuration options in plain files, eg:\n\n```shell\nconfig/\n└── vhosts\n    └── myapp.localhost\n```\n\n### Options\n\nYou may also pass in all the options as command line arguments\nand avoid storing the auth credentials in your gruntfile.\n\n#### options.user\n\nYour username.\n\n#### options.pass\n\nYour password.\n\n\n## The \"couch-security\" task\n\nYou can write [CouchDB _security Objects](http://couchdb.readthedocs.org/en/latest/json-structure.html#security-object)\nfrom project files with `couch-security`.\n\n### Overview\n\nIn your project's Gruntfile, add a section named `couch-security` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  'couch-security': {\n    options: {\n      user: 'karin',\n      pass: 'secure'\n    },\n    localhost: {\n      files: {\n        'http://localhost:5984/mydb': 'couch/mydb/security.json'\n      }\n    }\n  }\n})\n```\n\n### Options\n\nYou may also pass in all the options as command line arguments\nand avoid storing the auth credentials in your gruntfile.\n\n#### options.user\n\nYour username.\n\n#### options.pass\n\nYour password.\n\n\n## The \"couch-replication\" task\n\nYou can write [CouchDB _replicator Documents](http://couchdb.readthedocs.org/en/latest/replication.html)\nfrom project files with `couch-replication`.\n\nIf there is already a replication document, it will gets deleted and recreated,\nwhich causes the replication to restart.\n\n### Overview\n\nIn your project's Gruntfile, add a section named `couch-replication` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  'couch-replication': {\n    options: {\n      user: 'karin',\n      pass: 'secure'\n    },\n    localhost: {\n      files: {\n        'http://localhost:5984': 'couch/replications/*.json'\n      }\n    }\n  }\n})\n```\n\n### Options\n\nYou may also pass in all the options as command line arguments\nand avoid storing the auth credentials in your gruntfile.\n\n#### options.user\n\nYour username.\n\n#### options.pass\n\nYour password.\n\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\nAdd unit tests for any new or changed functionality.\nLint and test your code using [Grunt](http://gruntjs.com/).\n",
  "readmeFilename": "README.md",
  "_id": "grunt-couch@1.4.0",
  "_shasum": "c126153df4aadddf5c71f2a4365aedb3fae4b917",
  "_from": "../../../../var/folders/2l/y3fsns0x18j4wl50th891cd40000gq/T/npm-12957-d0e9da09/git-cache-2b88cb1ee3a6/01f88049ee4ba5dfaaf547b4d3cef1409c40ac8f",
  "_resolved": "git+https://github.com/chrisekelley/grunt-couch#01f88049ee4ba5dfaaf547b4d3cef1409c40ac8f"
}
